/* In this project, I demonstrated my expertise in SQL by creating a series of progressively 
challenging queries using PostgreSQL. The database I used comprises 15 tables, and I arranged the queries
in this fork from the most advanced to the least advanced. This approach witnessed the evolution 
of SQL skills and showcases the capabilities of PostgreSQL for handling complex data retrieval tasks. */ 


-- SELECT all of the films where the length is longer than the average of all films 
SELECT * 
FROM film 
WHERE length > (SELECT AVG(length) FROM film);

/* Write a query that return all films that are available in the inventory for store # 2,
more than 3 times. */ 
SELECT * 
FROM film
WHERE film_id IN (SELECT film_id
                  FROM inventory
                  WHERE store_id = 2
                  GROUP BY film_id
                  HAVING COUNT(*) > 3);

/* Return all customers' first names and last names that have made a payment on 
'2020-01-25' */
SELECT first_name, last_name
FROM customer
WHERE customer_id IN (SELECT customer_id 
					  FROM payment
					  WHERE DATE(payment_date) = '2020-01-25');

/* Return all customers' first names and email addresses that have spent more 
than a total of 30 dollars? */
SELECT first_name, email
FROM customer
WHERE customer_id IN (SELECT customer_id 
					  FROM payment
					  GROUP BY customer_id
					  HAVING SUM(amount)>30);

/* Return all the customers' first and last names that are from California and have 
spent more than 100 in total */ 
SELECT first_name, email
FROM customer
WHERE customer_id IN (SELECT customer_id 
					  FROM payment
					  GROUP BY customer_id
					  HAVING SUM(amount)>100)
AND customer_id IN (SELECT customer_id
				   FROM customer
				   INNER JOIN address
				   ON address.address_id = customer.address_id
				   WHERE district = 'California');

-- What is the average total amount spent per day (average daily revenue)? 
SELECT ROUND(AVG(amount_per_day),2) AS daily_rev_avg
FROM 
(SELECT SUM(amount) AS amount_per_day, 
DATE(payment_date)
FROM payment
GROUP BY DATE(payment_date)) AS subquery;

/* Show all the payments together with how much the payment amount is below 
the maximum payment amount */
SELECT *,
(SELECT MAX(amount) FROM payment) - amount AS differenct
FROM payment;

/* Show only the movie titles, their associated film_id and replacement cost with 
the lowest replacement costs for in each rating category. Show the rating too. */
SELECT title, film_id, replacement_cost, rating
FROM film f1
WHERE replacement_cost = (SELECT MIN(replacement_cost)
						 FROM film f2
						 WHERE f1.rating = f2.rating);

/* Show only the movie titles, their associated film id and the length that have the
longest length in each rating category. Show the rating too */
SELECT title, film_id, length, rating
FROM film f1
WHERE length = (SELECT MAX(length)
						 FROM film f2
						 WHERE f1.rating = f2.rating);

/* Show all the payments plus the total amount for every customer as well as the 
number of payments of each customer */ 
SELECT 
payment_id,
customer_id,
staff_id, amount,
(SELECT SUM(amount) AS sum_amount FROM payment p2
WHERE p1.customer_id = p2.customer_id),
(SELECT COUNT(amount) AS count_payments
FROM payment p2
 WHERE p1.customer_id = p2.customer_id)
FROM payment p1
ORDER BY customer_id, amount DESC;

/* Show only the films with the highest replacement costs in their rating category 
plus show the average replacement cost in their rating category. */
SELECT title, replacement_cost, rating, 
(SELECT ROUND(AVG(replacement_cost),2) FROM film f2
WHERE f1.rating = f2.rating)
FROM film f1
WHERE replacement_cost = (SELECT MAX(replacement_cost) 
									 FROM film f3 
									WHERE f1.rating = f3.rating);

/* Show only the payments with the highest payment for each customer's first name 
including the payment id of that payment */ 
SELECT first_name, amount, payment_id
FROM payment p1
INNER JOIN customer c
ON p1.customer_id = c.customer_id
WHERE amount = (SELECT MAX(amount) FROM payment p2
			   WHERE p1.customer_id = p2.customer_id);

--How would you solve it if you would not need to see the payment id?
SELECT first_name, MAX(amount)
FROM payment p1
INNER JOIN customer c
ON p1.customer_id = c.customer_id
GROUP BY first_name;

/* The company wants to run a phone call campaigning on all customers in Texas. 
Who are the customers from Texas? */ 
SELECT 
   first_name, 
   last_name, 
   phone, 
   district
FROM customer c
LEFT JOIN address a
ON c.address_id = a.address_id
WHERE district = 'Texas';

-- Are there any old addresses that are not related to any customer? 
SELECT *
FROM customer c
RIGHT JOIN address a
ON c.address_id = a.address_id
WHERE c.customer_id IS null;

/* The company wants to customize their campaigns to customers depending
on the country they are from. Which customers are from Brazil?  */ 
SELECT 
   first_name, 
   last_name, 
   email, 
   co.country
FROM customer c
LEFT JOIN address a 
ON c.address_id = a.address_id
LEFT JOIN city ci
ON ci.city_id = a.city_id
LEFT JOIN country co
ON co.country_id = ci.country_id
WHERE country = 'Brazil';

-- Which title has GEORGE LINTON rented the most often? 
SELECT 
    first_name, 
    last_name, 
	title, 
	COUNT(*)
FROM customer cu
INNER JOIN rental re
ON cu.customer_id = re.customer_id
INNER JOIN inventory inv
ON inv.inventory_id = re.inventory_id
INNER JOIN film fi
ON fi.film_id = inv.film_id
WHERE first_name = 'GEORGE' and last_name = 'LINTON'
GROUP BY title, first_name, last_name
ORDER BY 4 DESC;

/* You want to create a tier list in the following way:
1. Rating is 'PG' or 'PG-13' or length is more than 210mins:
'Great rating or long(tier 1)
2. Description contains 'Drama' and length is more than 90mins:
'Long dram (tier 2)'
3. Discription contains 'Drama' and length is not more than 90mins:
'Short drama (tier 3)'
4. Rental rate less than $1:
"Very cheap (tier 4)' */ 
SELECT 
title,
CASE
  WHEN rating IN ('PG','PG-13') OR length > 210 THEN 'Great rating or long (tier 1)'
	WHEN description LIKE '%Drama%' AND length > 90 THEN 'Long drama (tier 2)'
	WHEN description LIKE '%Drama%' THEN 'Short drama (tier 3)'
	WHEN rental_rate < 1 THEN 'Very cheap (tier 4)'
END tier_list
FROM film
WHERE 
CASE
  WHEN rating IN ('PG','PG-13') OR length > 210 THEN 'Great rating or long (tier 1)'
	WHEN description LIKE '%Drama%' AND length > 90 THEN 'Long drama (tier 2)'
	WHEN description LIKE '%Drama%' THEN 'Short drama (tier 3)'
	WHEN rental_rate < 1 THEN 'Very cheap (tier 4)'
END is not null;

-- Replace nulls using COALESCE and CAST functions 
SELECT 
rental_date, 
COALESCE(CAST(return_date AS VARCHAR), 'not returned')
FROM rental 
ORDER BY rental_date DESC;

/* Your manager is thinking about increasing the prices for films that are more
expensive to replace. For that reason, you should create a list of the films including
the relation of rental rate / replacement cost, where the rental rate is less than 4% 
of the replacement cost. The percentage should be rounded to 2 decimal places */
SELECT 
film_id,
rental_rate,
replacement_cost,
ROUND(rental_rate / replacement_cost *100, 2) AS percentage
FROM film
WHERE ROUND(rental_rate / replacement_cost *100, 2) < 4
ORDER BY percentage;


/* In the email system there was a problem with names where either the first name or
the last name are more than 10 characters long. Find these customers and output the list
of these first, last names, and email in all lower case.*/
SELECT 
LOWER(first_name) AS first_name,
LOWER(last_name) AS last_name,
LOWER(email) AS email
FROM customer 
WHERE LENGTH(first_name) > 10
OR LENGTH(last_name) > 10;

/* Extract the last 5 characters of the email address then extract only the . from the 
email address. Make it two different queries. First query is last 5 characters
the second query is only extracting the . from the email.*/ 
SELECT 
RIGHT(email,5),
email
FROM customer;

SELECT 
LEFT(RIGHT(email,4),1)
FROM customer;

-- You need to create an anonymized version of the email addresses. 
SELECT
LEFT(email,1) || '***' || RIGHT(email,19) AS anonymized
FROM customer;

/* You only have the email address and the last name of the customers. You need to 
extract the first name from the email address and concatenate it with the last name. 
It should be in the form: 'Last name, First name' */
SELECT 
email,
last_name,
last_name || ', ' || LEFT(email,POSITION('.' IN email)-1)
FROM customer;

/* You need to create an anonymized form of the email addresses in the following way
M***.S***@sakilacustomer.org */
SELECT 
LEFT(email,1) ||'***'
|| SUBSTRING(email from POSITION('.' in email)for 2)
|| '***' || SUBSTRING(email from POSITION('@' in email))
FROM customer;

/* In second query create an anonymized form of the email addresses in the following
way ***Y.S***@sakilacustomer.org */ 
SELECT 
'***' || SUBSTRING(email from POSITION('.' in email)-1 for 3)
|| '***' || SUBSTRING(email from POSITION('@' in email))
FROM customer;

-- You need to analyze the payments and find out of the following:
-- What's the month with the highest total payment amount?
SELECT 
EXTRACT(month from payment_date) AS month,
SUM(amount) AS total_payment_amount
FROM payment
GROUP BY EXTRACT(month from payment_date)
ORDER BY SUM(amount) DESC;
-- What's the day of the week with the highest total payment amount?
SELECT 
EXTRACT(dow from payment_date) AS day_of_week,
SUM(amount) AS total_payment_amount
FROM payment
GROUP BY day_of_week
ORDER BY SUM(amount) DESC;

-- What's the highest amount one customer has spent in a week? 
SELECT 
customer_id,
EXTRACT(week from payment_date) AS week,
SUM(amount) AS total_payment_amount
FROM payment
GROUP BY week, customer_id
ORDER BY SUM(amount) DESC;

/* You need to sum payments and group in the following formats: 
Fri,dd/mm/yyyy, May,yyyy and Thu, time */
SELECT 
SUM(amount) AS total_amount,
TO_CHAR(payment_date, 'Dy, DD/MM/YYYY') AS day
FROM payment 
GROUP BY day
ORDER BY total_amount DESC;

SELECT 
SUM(amount) AS total_amount,
TO_CHAR(payment_date, 'Mon, YYYY') AS month
FROM payment
GROUP BY month
ORDER BY total_amount DESC;

SELECT 
SUM(amount) AS total_amount,
TO_CHAR(payment_date, 'Dy, HH:MI') AS day_time
FROM payment
GROUP BY day_time
ORDER BY total_amount DESC

/* You need to create a list for the support team of all rental durations of customer
with customer_id 35. Also, you need to find out for the support team which customer
has the longest average rental duration? It will be two separate queries */
SELECT 
customer_id,
return_date - rental_date AS rental_duration
FROM rental 
WHERE customer_id = 35;

SELECT 
customer_id,
AVG(return_date - rental_date) AS average_duration
FROM rental 
GROUP BY customer_id
ORDER BY average_duration DESC;

/* Your manager wants to get a better understanding of the films and the replacement
cost of them. Write a query to see the MIN, MAX, AVG(rounded to 2 decimal places), 
and SUM. */
SELECT 
MIN(replacement_cost),
MAX(replacement_cost),
ROUND(AVG(replacement_cost),2) AS Average,
SUM(replacement_cost)
FROM film;

/* Your manager wants to know which of the two employees is responsible for more 
payments? Which of the two is responsible for a higher overall payment amount? */
SELECT 
COUNT(*),
SUM(amount),
staff_id
FROM payment
GROUP BY staff_id
ORDER BY staff_id;

-- How do those amounts change if we don't consider amounts equal to 0? 
SELECT 
COUNT(*),
SUM(amount),
staff_id
FROM payment
WHERE amount != 0
GROUP BY staff_id
ORDER BY staff_id;

-- Which employee had the highest sales amount in a single day? 
SELECT 
staff_id,
SUM(amount),
DATE(payment_date),
COUNT(*)
FROM payment
GROUP BY staff_id, DATE(payment_date)
ORDER BY SUM(amount) DESC;

/* Which employee had the most sales in a single day (not counting payment
with the amount = 0? */
SELECT 
staff_id,
SUM(amount),
DATE(payment_date),
COUNT(*)
FROM payment
WHERE amount != 0
GROUP BY staff_id, DATE(payment_date)
ORDER BY COUNT(*) DESC;

/* In 2020, April 28, 29, and 30 were days with very high revenue. Find out what 
is the average payment amount grouped by customer and day - consider only the days/
customers with more than 1 payment(per customer and day). Order by the average
amount in a descending order */ 
SELECT 
customer_id,
ROUND(AVG(amount),2) AS Average,
DATE(payment_date),
COUNT(customer_id)
FROM payment
WHERE DATE(payment_date) IN ('2020-04-28', '2020-04-29', '2020-04-30')
GROUP BY customer_id, DATE(payment_date)
HAVING COUNT(customer_id) > 1
ORDER BY ROUND(AVG(amount),2) DESC;


-- How many payment were made by the customer with customer_id = 100? 
SELECT 
COUNT(*)
FROM payment
WHERE customer_id = 100;

-- What is the last name of our customer with first name 'ERICA' 
SELECT 
first_name, 
last_name
FROM customer
WHERE first_name = 'ERICA';

/* The inventory manager asks you how many rentals have not been returned yet
return_date is null) */
SELECT
COUNT(*)
FROM rental
WHERE return_date is null;

/* The sales manager asks you for a list of all the payment_ids with an amount
less than or equal to $2. Include payment_id and the amount. */
SELECT 
payment_id,
amount
FROM payment
WHERE amount <= 2
ORDER by amount;

/* The support manager asks you about a list of all the payment of the customer 322,
346, and 354 where the amount is either less than $2 or greater than $10. 
It should be ordered by the customer first (ascending) and then as second condition
order by amount in a descending order.*/
SELECT 
customer_id,
amount
FROM payment
WHERE 
(customer_id = 322 OR customer_id = 346 OR customer_id = 354)
AND 
(amount < 2 OR amount > 10)
ORDER BY customer_id ASC, amount DESC;

/* There have been some faulty payments and you need to help find out how many payments 
have been affected. 
How many payments were made on January 26th and 27th 2020 with an amount between
1.99 and 3.99? */
SELECT 
COUNT(*)
FROM payment 
WHERE amount BETWEEN 1.99 AND 3.99
AND payment_date BETWEEN '2020-01-26' AND '2020-01-27 23:59';

/* There have been 6 complaints of customers about their payments. 
customer_id: 12, 25, 67, 67, 93, 124, 234
The concerned payments are all the payments of these customers with amounts
of 4.99, 7.99, and 9.99 in January 2020 */
SELECT *
FROM payment
WHERE customer_id IN (12,25,67,93,124,234)
AND amount IN (4.99,7.99,9.99)
AND payment_date BETWEEN '2020-01-01' AND '2020-01-31 23:59';

-- How many movies are there that contain "Documentary" in the description.
SELECT 
COUNT(*)
FROM film
WHERE description LIKE '%Documentary%';

/* How many customers are there with a first name that is 3 letters long and 
either an 'X' or a 'Y' as the last letter in their name */
SELECT 
COUNT(*)
FROM customer
WHERE first_name LIKE '___' -- three underscores
AND (last_name LIKE '%X' OR last_name LIKE '%Y');

/* How many movies are there that contain "Saga" in the description and where the 
title starts either with "A" or ends with "R"? */
SELECT 
COUNT(*)
FROM film
WHERE description LIKE '%Saga%'
AND (title LIKE 'A%' OR title LIKE '%R');

/* Create a list of all customers where the first name contains 'ER' and has an 'A'
as the second letter. Order the results by the last name descendlinly */
SELECT *
FROM customer
WHERE first_name LIKE '%ER%' AND first_name LIKE '_A%'
ORDER BY last_name DESC;

/* How many payments are there where the amount is either 0 or is between 3.99 and 
7.99 and in the same time has happened on 2020-05-01 */ 
SELECT
COUNT(*)
FROM payment
WHERE (amount = 0
OR amount BETWEEN 3.99 AND 7.99)
AND payment_date BETWEEN '2020-05-01' AND '2020-05-01 23:59';

/* The Marketing Manager asks you for a list of all customers.
With first name, last name, and the customer's email address. */
SELECT 
first_name,
last_name,
email
FROM customer;

/* The Marketing Manager asks you to order the customer list by the last name. 
They want to start from "Z" and work towards "A". In case of the same last name
the order should be based on the first name - also from "Z" to "A" */
SELECT 
first_name,
last_name,
email
FROM customer
ORDER BY last_name DESC, first_name DESC;

/* A marketing team member asks you about the different prices that have been paid. 
To make it easier for them order the prices form high to low. */
SELECT DISTINCT 
amount
FROM payment
ORDER BY amount DESC;

-- Create a list of all the distinct districts customers are from. 
SELECT DISTINCT
district
FROM address;

-- What is the latest rental date? 
SELECT 
rental_date
FROM rental
ORDER BY rental_date DESC
LIMIT 1;

-- How many films does the company have? 
SELECT 
COUNT(*)
FROM film;

-- How many distinct last names of the customers are there? 
SELECT
COUNT(DISTINCT last_name)
FROM customer;

